using System.Numerics;
using Content.Client.UserInterface.Controls;
using Content.Shared._Stalker_EN.FactionTeleport;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Maths;
using Robust.Shared.IoC;
using Robust.Shared.GameObjects;

namespace Content.Client._Stalker_EN.FactionTeleport;

[GenerateTypedNameReferences]
public sealed partial class FactionTeleportWindow : FancyWindow
{
    public event Action<NetEntity>? OnTeleportPressed;

    // Local cache so we know which NetEntity each row maps to.
    private readonly List<FactionTeleportDestination> _current = new();

    [Dependency] private readonly IEntityManager _entManager = default!;

    public FactionTeleportWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void Populate(IReadOnlyList<FactionTeleportDestination> destinations)
    {
        _current.Clear();
        _current.AddRange(destinations);

        Rows.DisposeAllChildren();

        for (var i = 0; i < destinations.Count; i++)
        {
            var dest = destinations[i];

            var row = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
                HorizontalExpand = true,
                Margin = new Thickness(0, 0, 0, 4)
            };

            var nameLabel = new Label
            {
                Text = dest.Name,
                HorizontalExpand = true
            };

            // Prefer color from the actual destination component on the client.
            Color? labelColor = null;
            if (_entManager.TryGetEntity(dest.Destination, out var destUid) &&
                _entManager.TryGetComponent(destUid, out FactionTeleportComponent? tpComp) &&
                tpComp.NameColor is { } compColor)
            {
                labelColor = compColor;
            }
            else if (dest.HasColor)
            {
                labelColor = dest.NameColor;
            }

            if (labelColor is { } col)
            {
                nameLabel.FontColorOverride = col;
                nameLabel.ModulateSelfOverride = col.WithAlpha(1f);
            }

            var tpButton = new Button
            {
                Text = "Teleport",
                MinSize = new Vector2(56, 24)
            };

            // Capture dest in lambda safely
            tpButton.OnPressed += _ => OnTeleportPressed?.Invoke(dest.Destination);

            row.AddChild(nameLabel);
            row.AddChild(tpButton);

            Rows.AddChild(row);
        }
    }
}
